{"version":3,"sources":["forest.png","dmvoicegame.ts","index.tsx"],"names":["sayPlace","send","context","type","value","recResult","utterance","say","text","_context","prompt","initial","states","entry","promptAndAsk","on","ENDSPEECH","ask","notmatchedsentences","randomnomatchedsentence","Math","random","floor","length","menugrammar","beach","forest","help","right","left","leave","money","img_grammar","bg","dmMachine","idle","CLICK","init","TTS_READY","noMatch","notmatched","getHelp","helpmessage","endofgame","end","voicegameapp","hist","history","histforask","stop","always","welcome","RECOGNISED","target","cond","actions","assign","TIMEOUT","sayforest","tellforeststory","right_cave","left_river","cavestory","cavealternatives","offermoney","promptmoney","lookforacorns","URL","cancel","REGION","inspect","url","iframe","machine","Machine","id","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getToken","invoke","src","_evt","getAuthorizationToken","onDone","event","azureAuthorizationToken","data","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","test","name","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","testingtext","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeBackground","asEffect","document","body","backgroundImage","current","background","recStart","asr","start","recStop","abort","ttsStart","content","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","fetch","Request","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.5d7e6738.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/forest.9e1b33fe.png\";","import { MachineConfig, send, Action, assign } from \"xstate\";\nimport bg from \"./forest.png\"\n\nconst sayPlace: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `You're right. It does seem to be a ${context.recResult[0].utterance}` // not needed\n}))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction sayp(text:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return({\n        initial: 'saytheplace',\n        states: {\n            saytheplace: {\n                entry: say(text),\n                on: { ENDSPEECH: '#root.dm.voicegameapp.histforask' }, //backgroundChanger },\n            },\n            backgroundChanger: {\n                entry: ['changeBackground'],\n                always: '#root.dm.voicegameapp.forest'\n            },\n        }\n    })\n}\n\nfunction prompt(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: { prompt: { entry: say(prompt) } }\n    })\n}\n\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: { entry: send('LISTEN') }\n        }\n    })\n}\n\n// Sentences to ask if if no match\nconst notmatchedsentences = [\n    \"Sorry what did you say?\",\n    \"Sorry I didn't understand what you said\",\n    \"Could you repeat that?\",\n    \"Could you say that again, please?\",\n    \"What did you say?\",\n    ]\n\n// Sentences will be randomized if utterance was not understood, to avoid repetitions\nvar randomNumber = Math.random\nconst randomnomatchedsentence = notmatchedsentences[Math.floor(Math.random() * Math.floor(notmatchedsentences.length))]\n\n\nconst menugrammar: { [index: string]: { beach?: string, forest?: string, help?: string, right?: string, left?:string, leave?: string, money?: string, } } = {\n    \"It's a beach.\": {beach: \"beach\" },\n    \"A beach\": {beach: \"beach\"},\n    \"A forest\": {forest: \"forest\" },\n    \"Forest.\": {forest: \"forest\" },\n    \"It's a forest.\": {forest: \"forest\" },\n    \"Help.\": {help: \"Help\" },\n    \"Right.\": {right: \"right\" },\n    \"Right?\": {right: \"right\" },\n    \"Left\": {left: \"left\" },\n    \"Left?\": {left: \"left\"},\n    \"Leave.\": {leave: \"leave\"},\n    \"Money.\": {money: \"money\"}\n}\n\nconst img_grammar: {[index: string]: {forest?: any}} = {\n    \"Forest.\": {forest: bg}//new URL('https://nordicforestresearch.org/wp-content/uploads/2020/05/forest-4181023_1280.jpg')}\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'voicegameapp',\n                CLICK: 'voicegameapp'\n            }\n        },\n        noMatch: {\n            initial: 'notmatched',\n            states: {\n                notmatched: {\n                    entry: say(randomnomatchedsentence),\n                    on: { ENDSPEECH: '#root.dm.voicegameapp.histforask'},\n                }\n            }\n        },\n        getHelp: {\n            initial: 'helpmessage',\n            states: {\n                helpmessage: {\n                    entry: say(\"One thing that we actually have succeeded to implement at this moment is this help message\"),\n                    on: { ENDSPEECH: '#root.dm.voicegameapp'},\n                }\n            }\n        },\n        endofgame: {\n            initial: 'end',\n            states: {\n                end: {\n                    entry: say(\"Game ended. Please play again if you'd like to\"),\n                    on: {ENDSPEECH: '#root.dm.idle'}\n                }\n            },\n        },\n        voicegameapp: {\n            initial: 'welcome',\n            states: {\n                hist: {\n                    type: 'history',\n                    history: 'shallow'\n                },\n                histforask: {\n                    type: 'history',\n                    history: 'deep',\n                },\n            stop: {\n                entry: say(\"Ok\"),\n                always: '#root.dm.idle'\n            },\n            welcome: {\n                initial: 'prompt',\n                on: {\n                    RECOGNISED: [\n                        {\n                            target: 'forest',\n                            cond: (context) => \"forest\" in (menugrammar[context.recResult[0].utterance] || {}),\n                            actions: assign({ forest: (context) => img_grammar[context.recResult[0].utterance].forest!})\n                        },\n                        {   target: '#root.dm.getHelp',\n                            cond: (context) => \"help\" in (menugrammar[context.recResult[0].utterance] || {})\n                        },\n                        {\n                            target: '#root.dm.noMatch'\n                        }\n                    ],\n                    TIMEOUT: '..', \n                },\n                ...promptAndAsk(\"Welcome!\"), //You wake up and find yourself in a strange place. But you can't quite tell where. I think you have something in your eyes. Could it be a forest…or more like a beach? What do you think?\n            },\n            forest: {\n                initial: 'sayforest',\n                on: {\n                    RECOGNISED: [\n                        {   target: '#root.dm.getHelp',\n                            cond: (context) => \"help\" in (menugrammar[context.recResult[0].utterance] || {})\n                        },\n                        {\n                            target: 'right_cave',\n                            cond: (context) => \"right\" in (menugrammar[context.recResult[0].utterance] || {}),\n                        },\n                        {\n                            target: 'left_river',\n                            cond: (context) => \"left\" in (menugrammar[context.recResult[0].utterance] || {}),\n                        },\n                        {\n                            target: '#root.dm.noMatch'\n                        }\n                    ]\n                },\n                states: {\n                    sayforest: {\n                        entry: sayPlace,\n                        on: { ENDSPEECH: 'tellforeststory' },\n                    },\n                    tellforeststory: {\n                        ...promptAndAsk(\"To your right a river is flowing, and to the left there's a cave. Where would you like to go?\"),\n                    },\n                },\n            },\n            //game ended\n            right_cave: {\n            ...prompt(\"You get hit in the head with a bat. You're now dead. Turns out, the one you talked to was the second in command. The older brother wants people to recognise he's in charge and you upset him. Too bad.\")\n        },\n        left_river: {\n            initial: 'cavestory',\n            on: {\n                RECOGNISED: [\n                    {   target: '#root.dm.getHelp',\n                        cond: (context) => \"help\" in (menugrammar[context.recResult[0].utterance] || {})\n                    },\n                    {\n                        target: '#root.dm.endofgame',\n                        cond: (context) => \"leave\" in (menugrammar[context.recResult[0].utterance] || {}),\n                    },\n                    {\n                        target: 'offermoney',\n                        cond: (context) => \"money\" in (menugrammar[context.recResult[0].utterance] || {}),\n                    },\n                    {\n                        target: 'lookforacorns',\n                        cond: (context) => \"acorns\" in (menugrammar[context.recResult[0].utterance] || {}),\n                    },\n                    {\n                        target: '#root.dm.noMatch'\n                    },\n\n                ]\n            },\n            states: {\n                cavestory: {\n                    ...prompt(\"The troll tells you that for the small price of 10 acorns, they can let you inside the cave\"),\n                    on: {ENDSPEECH: 'cavealternatives'},\n                },\n                cavealternatives: {\n                    ...promptAndAsk(\"You can leave, offer them money instead or look for acorns\")\n                }\n            }\n        },\n        offermoney: {\n            initial: 'promptmoney',\n            states: {\n                promptmoney: {\n                ...prompt(\"You say you don’t have acorns, but you have 10 euros in your pocket . The trolls laugh. You should go look for some acorns then\"),\n                on: {ENDSPEECH: '#root.dm.voicegameapp.lookforacorns'}\n            }, \n            }\n            \n        },\n\n\n        lookforacorns: {\n            ...prompt(\"You look for acorns\")\n        }\n    },\n},\n    },\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmvoicegame\";\nimport bg from \"./forest.png\"\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\nimport { useEffect, useState } from \"react\";\n\n\nconst img_grammar_2: {[index: string]: {forest?: any}} = {\n    \"Forest.\": {forest: new URL('https://nordicforestresearch.org/wp-content/uploads/2020/05/forest-4181023_1280.jpg')}\n}\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find(voice => /Christopher/u.test(voice.name))! //voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (500 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"], context.recResult[0][\"background\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var testingtext = ((props.state.context.tdmVisualOutputInfo || [{}])\n    .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Welcome to the game! Click the circle to start\"\n            testingtext = \"And this is another text\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Welcome to the game! Click the circle to start\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                    {testingtext}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeBackground: asEffect((context) => {\n                document.body.style.backgroundImage =  current.context.recResult[0].background //context.recResult[0].background//(`${context.forest}`)\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence,\n                                    \"background\": result[0].background\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        },\n    });\n    \n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);"],"sourceRoot":""}