{"version":3,"sources":["images.ts","dmvoicegame.ts","index.tsx"],"names":["img_grammar","background","blackbackground","sayPlace","send","context","type","value","place","say","text","_context","prompt","initial","states","entry","promptAndAsk","assign","promptcounter","on","ENDSPEECH","ask","hist","history","notmatchedsentences","helpmessages","lostlives","stopwords","stop","menu","dmMachine","lifecounter","idle","CLICK","init","TTS_READY","noMatch","notmatched","Math","floor","random","length","backgroundChanger","always","getHelp","helpmessage","endofgame","RECOGNISED","target","cond","actions","end","twolivesleft","telltwolives","onelifeleft","tellonelife","endofgamebeach","voicegameapp","histforask","hello","welcome","recResult","utterance","includes","TIMEOUT","forest","sayforest","tellforeststory","cave","cavestory","cavealternatives","right_troll","sayprompt","left_troll","offer_money_trolls","leave","wander","backtocave","talktotrolls","choices","trollskill","anotherpath","omg","what","river2","river1","somewhere_else","wait","look","squirrelriver","cross","shout","lure","ending1","ending2","lookforacorns","sayacorns","shake_tree","climb_tree","climbchoices","steal","offermoneysquirrel","cave2","insidecave","inside","buy","beach","saybeach","tellbeachstory1","tellbeachstory2","boat","palm_tree","cancel","REGION","inspect","url","iframe","machine","Machine","id","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getToken","invoke","src","_evt","getAuthorizationToken","onDone","event","azureAuthorizationToken","data","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","test","name","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","ASRRESULT","SELECT","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeBackground","asEffect","document","body","backgroundImage","recStart","asr","start","recStop","abort","ttsStart","content","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","fetch","Request","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.5c0929f5.chunk.js","sourcesContent":["export {img_grammar}\n\nconst img_grammar: { [index: string]: { background?: any } } = {\n    \"A forest.\": { background: 'https://nordicforestresearch.org/wp-content/uploads/2020/05/forest-4181023_1280.jpg' },\n    \"Forest.\": { background: 'https://nordicforestresearch.org/wp-content/uploads/2020/05/forest-4181023_1280.jpg' },\n    \"Leave.\": { background: 'https://thumbs.dreamstime.com/b/crossroads-forest-3448364.jpg' },\n    \"Leave\": { background: 'https://thumbs.dreamstime.com/b/crossroads-forest-3448364.jpg' },\n    \"I want to leave.\": { background: 'https://thumbs.dreamstime.com/b/crossroads-forest-3448364.jpg' },\n    \"I change my mind.\": { background: 'https://thumbs.dreamstime.com/b/crossroads-forest-3448364.jpg' },\n    \"I changed my mind.\": { background: 'https://thumbs.dreamstime.com/b/crossroads-forest-3448364.jpg' },\n    \"Changed my mind\": { background: 'https://thumbs.dreamstime.com/b/crossroads-forest-3448364.jpg' },\n    \"Change your mind.\": { background: 'https://thumbs.dreamstime.com/b/crossroads-forest-3448364.jpg' },\n    \"A beach.\": { background: 'https://dynamic-media-cdn.tripadvisor.com/media/photo-o/11/cd/51/9b/seven-mile-beach.jpg?w=1200&h=-1&s=1' },\n    \"Beach.\": { background: 'https://dynamic-media-cdn.tripadvisor.com/media/photo-o/11/cd/51/9b/seven-mile-beach.jpg?w=1200&h=-1&s=1' },\n    \"Cave.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"To The Cave.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"River.\": {background: 'https://jooinn.com/images/river-in-forest-1.jpg'},\n    \"Yes.\": {background: 'https://jooinn.com/images/river-in-forest-1.jpg'},\n    \"No.\": {background: 'https://jooinn.com/images/river-in-forest-1.jpg'},\n    \"South.\" : {background: 'https://jooinn.com/images/river-in-forest-1.jpg'},\n    \"To the South.\" : {background: 'https://jooinn.com/images/river-in-forest-1.jpg'},\n    \"Go down South.\" : {background: 'https://jooinn.com/images/river-in-forest-1.jpg'},\n    \"To the river.\" : {background: 'https://jooinn.com/images/river-in-forest-1.jpg'},\n    \"Offer money.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' }, \n    \"Give them money\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Give it money.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Offer it money.\" : { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"To the left.\": { background: 'https://jooinn.com/images/river-in-forest-1.jpg' },\n    \"To the right.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Up north.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Go north.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"To the north.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' }, \n    \"Acorns.\": { background: 'https://wallpaperaccess.com/full/4101978.jpg' },\n    \"Find acorns.\": { background: 'https://wallpaperaccess.com/full/4101978.jpg' },\n    \"Find some acorns\": { background: 'https://wallpaperaccess.com/full/4101978.jpg' },\n    \"Find some acorns.\": { background: 'https://wallpaperaccess.com/full/4101978.jpg' },\n    \"Try to find acorns\": { background: 'https://wallpaperaccess.com/full/4101978.jpg' },\n    \"Try to look for acorns.\": { background: 'https://wallpaperaccess.com/full/4101978.jpg' },\n    \"Look for acorns.\" : { background: 'https://wallpaperaccess.com/full/4101978.jpg' },\n    \"Try another path.\" : {background: 'https://i.imgur.com/WCrueUG.jpg'},\n    \"Try to find another path.\": {background: 'https://i.imgur.com/WCrueUG.jpg'},\n    \"Take another path.\": {background: 'https://i.imgur.com/WCrueUG.jpg'},\n    \"Find another path.\": {background: 'https://i.imgur.com/WCrueUG.jpg'},\n    \"Go on another path.\": {background: 'https://i.imgur.com/WCrueUG.jpg'},\n    \"Try to go on another path.\": {background: 'https://i.imgur.com/WCrueUG.jpg'},\n    \"Another path.\": {background: 'https://i.imgur.com/WCrueUG.jpg'},\n    \"Money.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Give it the money.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Try to offer it the money.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Offer it the money.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Offer the money.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Offer money to it.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Try to give it the money.\": { background: 'https://i.imgur.com/LN6RQOJ.jpg' },\n    \"Go inside.\": { background: 'https://i.imgur.com/pqnAabX.jpg' },\n    \"I go inside.\": { background: 'https://i.imgur.com/pqnAabX.jpg' },\n    \"Inside.\": { background: 'https://i.imgur.com/pqnAabX.jpg' },\n    \"Go inside The Cave.\": { background: 'https://i.imgur.com/pqnAabX.jpg' },\n    \"I go inside The Cave.\": { background: 'https://i.imgur.com/pqnAabX.jpg' },\n\n}  \n","import { MachineConfig, send, Action, assign } from \"xstate\";\nimport {img_grammar} from './images'\n\nconst blackbackground = 'https://esquilo.io/wallpaper/wallpaper/20210704/black-wallpaper-plain-plain-black-desktop-wallpapers-on-wallpaperdog-preview.webp'\n\nconst sayPlace: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `You're right. It does seem to be a ${context.place}`\n}))\n\nfunction say(text: (context: SDSContext) => string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text(_context) }))\n}\n\nfunction prompt(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: { prompt: { entry: say(() => prompt) } }\n    })\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: [say(() => prompt), assign({promptcounter: (context) => context.promptcounter = 0})],\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: { entry: send('LISTEN') },\n            hist: {\n                    type: 'history',\n                    history: 'deep'\n                },\n        }\n    })\n}\n\n// Sentences to ask if if no match\nconst notmatchedsentences = [\n    \"What did you say?\",\n    \"Can you speak up?\",\n    \"Maybe work on your enunciation.\",\n    \"Am I deaf or did you mumble?\",\n    \"What was that?\",\n    \"Are you shy, or what?\",\n    \"Don't be shy.\",\n    \"Are you eating and speaking?\",\n    \"Take a breath and try again.\",\n    \"Are you slow?\",\n    \"Could you repeat that?\",\n]\n\nconst helpmessages = [\n    \"Didn't you pay attention to the rules?\",\n    \"I don't think it is so hard to figure out.\",\n    \"Think harder.\",\n    \"Let me say that again.\",\n    \"You have a short memory it seems.\",\n    \"Are you slow?\"\n]\n\nconst lostlives = [\n    \"Oops, you lost a life\",\n    \"Oh no! You lost a life\",\n    \"Oops, this was definitely not the right path to search for your wallet. You lost a life\",\n    \"Well, this was a wrong turn. You lost a life.\",\n    \"You should be searching for your wallet, not finding ways to die\",\n    \"Unfortunately this was not what you expected, you lost a life\",\n    \"Good job! You lost a life.\",\n    \"Nice! One step closer to death. You lost a life.\"\n]\n\nconst stopwords: { [index: string]: { stop?: string } } = {\n    \"Stop.\": { stop: \"Stop\" },\n    \"Shut up.\": {stop: \"Stop\"},\n    \"I don't want to play anymore.\": {stop: \"Stop\"},\n    \"End game.\": {stop: \"Stop\"},\n    \"Quit game.\": {stop: \"Stop\"},\n    \"Quit playing.\": {stop: \"Stop\"},\n    \"End the game.\": {stop: \"Stop\" }\n}\n\n// I got sick of scrolling for ages so I made them horizontal instead of vertical :--)\nconst menu : { [index: string]: Array<string> } = {\n    'forest': [\"A forest.\", \"Forest.\", \"It's a forest.\"\n    ],\n    'beach': [\"A beach.\", \"Beach\", \"It's a beach.\", \"I think it's a beach\", \"Beach.\"\n    ],\n    'boat': [\"Boat.\",\n    ],\n    'tree': [\"Palm tree\", \"Tree.\", \"Tree\", \"3.\", \"Three.\",\"Three\", \"Trees.\",\n    ],\n    'cave': [\"Cave.\", \"Go to the cave\", \"To The Cave\"\n    ],\n    'acorns': [ \"Acorns.\",\"Acorns\", \"Find some acorns\", \"Find some acorns.\", \"Find acorns.\",\"Try to find acorns\",\"Try to look for acorns.\", \"Look for acorns.\"\n    ],\n    'shake': [ \"Shake.\",\"Shake it.\",\"Shake the tree.\", \"Try to shake it.\"\n    ],\n    'climb': [\"Climb.\", \"Climb it.\", \"Climb the tree.\",\"Try to climb it.\"\n    ],\n    'left': [ \"Left.\",\"Left\", \"To the left.\", \"To the left one.\",\"The left one.\",\"I want to go to the left.\", \"The left troll.\",  \"To the left troll.\"\n    ],\n    'right': [ \"Right.\",\"To the right.\",  \"The right one.\", \"To the right one.\", \"I want to go to the right.\", \"The right troll.\",\"To the right troll.\", \"Right?\",\n    ],\n    'leave': [ \"Leave.\",\"I want to leave.\", \"Leave\", \"Live\"\n    ],\n    'money': [ \"Money.\", \"Offer money.\",\"Offer it money\", \"Try to offer it money\", \"Offer money to it\", \"Give them money\", \"Give it the bill.\", \"Give it the money.\", \"Try to give it the bill.\", \"Try to give it the money.\", \"Bill\",\n    ],\n    'help': [ \"Help.\",\"What should I do?.\",\"I don't know what to do.\",\"The right troll.\", \"To the right troll.\"\n    ],\n    'steal': [\"Steal.\", \"Steal the acorns.\", \"Steal them.\",\"Try to steal.\",\"Try to steal them.\"\n    ],\n    'talk': [ \"Try to talk to the trolls.\", \"Talk to the trolls.\", \"Try to talk to the trolls again.\", \"Talk to the trolls again.\", \"Talk.\", \"Talk\"\n    ],\n    'path': [ \"Try another path.\", \"Find another path.\", \"Try to find another path.\", \"Take another path.\", \"Go on another path.\",  \"Try to go on another path.\", \"Another path.\", \"Another path\"\n    ],\n    'else': [ \"Go somewhere else.\", \"I want to go somewhere else.\"\n    ],\n    'wait': [ \"Wait.\", \"Wait here.\", \"Let's wait.\", \"Let's wait a bit.\", \"Wait a bit.\", \"Wait?\"\n    ],\n    'shout': [ \"Shout.\", \"Shout profanities.\", \"Shout at it.\", \"Shout profanities at it.\"\n    ],\n    'cross': [ \"Cross.\", \"Cross the river.\", \"Try to cross.\", \"Try to cross the river.\"\n    ],\n    'yes': [\"Yes.\"\n    ],\n    'no': [\"No.\"\n    ],\n    'lure': [\"Try to lure it.\", \"Lure it.\", \"Lure.\", \"Lure\", \"I want to lure it\", \n    ],\n    'take': [\"Take the wallet.\", \"Try to take the wallet.\", \"Take it.\", \"Try to take it.\"\n    ],\n    'change': [\"I change my mind.\", \"I changed my mind.\", \"Changed my mind\", \"Change your mind.\"\n    ],\n    'inside': [\"Go inside.\", \"I go inside.\", \"Inside.\", \"Go inside The Cave.\", \"I go inside The Cave.\"\n    ],\n    'buy': [\"Buy an ice cream.\", \"Buy.\", \"I buy an ice cream.\"]\n\n    \n\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    entry: assign({ lifecounter: (context) => context.lifecounter = 3 }),\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            entry: [assign({ background: (context) => context.background = 'https://c.pxhere.com/images/6e/62/14ec0e80e4a8bfd7510e8745c88f-1628448.jpg!d'})],\n            on: {\n                TTS_READY: 'voicegameapp',\n                CLICK: 'voicegameapp',\n            }\n        },\n        noMatch: {\n            initial: 'notmatched',\n            states: {\n                notmatched: {\n                    entry: say(() => notmatchedsentences[Math.floor(Math.random() * (notmatchedsentences.length))]),\n                    on: { ENDSPEECH: 'backgroundChanger' },\n                },\n                backgroundChanger: {\n                    entry: ['changeBackground'],\n                    always: '#root.dm.voicegameapp.histforask'\n                },\n            }\n        },\n        getHelp: {\n            initial: 'helpmessage',\n            states: {\n                helpmessage: {\n                    entry: say(() => helpmessages[Math.floor(Math.random() * (helpmessages.length))]),\n                    on: { ENDSPEECH: '#root.dm.voicegameapp.histforask' },\n                }\n            }\n        },\n        endofgame: {\n            initial: 'entry',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: '.twolivesleft',\n                        cond: (context) => context.lifecounter === 2,\n                    },\n                    {\n                        target: '.onelifeleft',\n                        cond: (context) => context.lifecounter === 1,\n                    },\n                    {\n                        target: '.end',\n                        cond: (context) => context.lifecounter === 0,\n                    },\n                    {\n                        target: '#root.dm.noMatch'\n                    },\n                ],\n            },\n            states: {\n                entry: {\n                    always: [\n                        {\n                            target: 'twolivesleft',\n                            cond: (context) => context.lifecounter === 2,\n                        },\n                        {\n                            target: 'onelifeleft',\n                            cond: (context) => context.lifecounter === 1,\n                        },\n                        {\n                            target: 'end',\n                            cond: (context) => context.lifecounter === 0,\n                            actions: assign({background: (context) => context.background = blackbackground}),\n                        },\n                    ]\n                },\n                end: {\n                    entry: [say(() => \"You ran out of lives. You died.\"), 'changeBackground'], //i tried fixing the background when one dies\n                    on: { ENDSPEECH: '#root.dm.idle' },\n                },\n                twolivesleft: {\n                    entry: say(() => lostlives[Math.floor(Math.random() * (lostlives.length))]),\n                    on: { ENDSPEECH: 'telltwolives' }\n                },\n                telltwolives: {\n                    entry: say((context) => `You still have ${context.lifecounter} lives left. You can continue your game from the nearest checkpoint.`),\n                    on: { ENDSPEECH: '#root.dm.voicegameapp.hist' }\n                },\n                onelifeleft: {\n                    entry: say(() => lostlives[Math.floor(Math.random() * (lostlives.length))]),\n                    on: { ENDSPEECH: 'tellonelife' }\n                },\n                tellonelife: {\n                    entry: say((context) => `You still have ${context.lifecounter} life left. You can continue your game from the nearest checkpoint.`),\n                    on: { ENDSPEECH: '#root.dm.voicegameapp.hist' },\n                },\n            },\n        },\n        endofgamebeach: {\n            initial: 'entry',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: '.twolivesleft',\n                        cond: (context) => context.lifecounter === 2,\n                    },\n                    {\n                        target: '.onelifeleft',\n                        cond: (context) => context.lifecounter === 1,\n                    },\n                    {\n                        target: '.end',\n                        cond: (context) => context.lifecounter === 0,\n                    },\n                    {\n                        target: '#root.dm.noMatch'\n                    },\n                ]\n            },\n            states: {\n                entry: {\n                    always: [\n                        {\n                            target: 'twolivesleft',\n                            cond: (context) => context.lifecounter === 2,\n                            actions: assign({ background: (context) => context.background = 'https://c.pxhere.com/images/6e/62/14ec0e80e4a8bfd7510e8745c88f-1628448.jpg!d' }),\n                        },\n                        {\n                            target: 'onelifeleft',\n                            cond: (context) => context.lifecounter === 1,\n                            actions: assign({ background: (context) => context.background = 'https://c.pxhere.com/images/6e/62/14ec0e80e4a8bfd7510e8745c88f-1628448.jpg!d' }),\n                        },\n                        {\n                            target: 'end',\n                            cond: (context) => context.lifecounter === 0,\n                            actions: assign({background: (context) => context.background = blackbackground})\n                        },\n                    ]\n                },\n                end: {\n                    entry: [say(() => \"You ran out of lives. You died.\"), 'changeBackground'],\n                    on: { ENDSPEECH: '#root.dm.idle' },\n                },\n                twolivesleft: {\n                    entry: [say((context) => `You still have ${context.lifecounter} lives left. Try finding the right path. Where should you go?`), 'changeBackground'],\n                    on: { ENDSPEECH: '#root.dm.voicegameapp.welcome.hist' }\n                },\n                onelifeleft: {\n                    entry: [say((context) => `You still have ${context.lifecounter} life left. Try finding the right path. Where should you go?`), 'changeBackground'],\n                    on: { ENDSPEECH: '#root.dm.voicegameapp.welcome.hist' },\n                },\n            },\n        },\n        voicegameapp: {\n            initial: 'hello',\n            entry: 'changeBackground',\n            states: {\n                hist: {\n                    type: 'history',\n                    history: 'shallow'\n                },\n                histforask: {\n                    type: 'history',\n                    history: 'deep',\n                },\n                stop: {\n                    entry: say(() => \"Ok. Thanks for playing\"),\n                    always: '#root.dm.idle'\n                },\n                hello: {\n                    entry: say(() => \"Hello! And welcome to our game, The Lost Wallet. Before we begin, I am going to explain the rules to you. After a night of partying, you realise you have lost your wallet under curious circumstances. You have to navigate an unknown territory in order to find it, and be very careful to the choices you are presented with. You have three lives. When you die, you respawn to the nearest checkpoint, but if you lose all of them, it's game over. You have nothing with you except for two 5 euros bills. Good luck and have fun!\"), \n                    on: { ENDSPEECH: 'welcome' },               \n                },\n                welcome: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            { //There's probably a way to make these into lowercase so we don't have to type all alternatives with both Capital letter and without\n                                target: 'forest',\n                                cond: (context) => context.recResult[0].utterance.includes(\"forest\" || \"Forest\"), // seems like we need this as well...                            \n                                actions: assign({ background: (context) => img_grammar[\"Forest.\"].background! })\n                            },\n                            {\n                                target: 'beach',\n                                cond: (context) => context.recResult[0].utterance.includes(\"beach\" || \"Beach\"),\n                                actions: assign({ background: (context) => img_grammar[\"Beach.\"].background! })\n                            },\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    ...promptAndAsk(\"You wake up and find yourself in a strange place. But you can't quite tell where. I think you have something in your eyes. Could it be a forest…or more like a beach? What do you think it is? \"),\n                },\n                forest: {\n                    initial: 'sayforest',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'cave',\n                                cond: (context) => context.recResult[0].utterance.includes(\"Cave\" || \"North\" || \"north\"),\n                                actions: assign({ background: (context) => img_grammar[\"Cave.\"].background! })\n                            },\n                            {\n                                target: 'river1',\n                                cond: (context) => context.recResult[0].utterance.includes(\"river\" || \"South\"),\n                                actions: assign({ background: (context) => img_grammar[\"River.\"].background! })\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        sayforest: {\n                            entry: [assign({place: (context) => context.place = \"forest\"}), sayPlace],\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: 'tellforeststory'\n                        },\n                        tellforeststory: {\n                            ...promptAndAsk(\"Down south you hear a river flowing, and up north there's a cave. Where would you like to go?\"),\n                        },\n                    },\n                },\n                cave: {\n                    initial: 'cavestory',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '#root.dm.endofgame',\n                                cond: (context) => menu['leave'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'left_troll',\n                                cond: (context) => context.recResult[0].utterance.includes(\"left\" || \"Left\"),\n                            },\n                            {\n                                target: '.right_troll',\n                                cond: (context) => menu['right'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch',\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        cavestory: {\n                            ...prompt(\"You make your way to the cave.\"),\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: 'cavealternatives'\n                        },\n                        cavealternatives: {\n                            ...promptAndAsk(\"In front of it there are two trolls, but they don't say anything. Which one do you adress?\")\n                        },\n                        right_troll: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"You get hit in the head with a bat. Turns out, the one you talked to was the second in command. The older brother wants people to recognise he's in charge and you upset him.\"), \n                                    assign({ lifecounter: (context) => context.lifecounter - 1 })],\n                                    on: { ENDSPEECH: '#root.dm.endofgame' },\n                                },\n                            },\n                        },\n                    },\n                },\n                left_troll: {\n                    initial: 'cavestory',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'leave',\n                                cond: (context) => context.recResult[0].utterance.includes(\"leave\" || \"Leave.\"),\n                                actions: assign({ background: (context) => img_grammar[\"Leave.\"].background! })\n                            },\n                            {\n                                target: 'offer_money_trolls',\n                                cond: (context) => context.recResult[0].utterance.includes(\"money\" || \"offer\" || \"Offer\"),\n                            },\n                            {\n                                target: 'lookforacorns',\n                                cond: (context) => context.recResult[0].utterance.includes(\"acorns\" || \"look\"),\n                                actions: assign({ background: (context) => img_grammar[\"Acorns.\"].background! })\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        cavestory: {\n                            ...prompt(\"The troll tells you that for the small price of 10 acorns, they can let you inside the cave\"),\n                            on: { ENDSPEECH: 'cavealternatives' },\n                        },\n                        cavealternatives: {\n                            ...promptAndAsk(\"You can leave, offer them money or look for acorns.\")\n                        }\n                    }\n                },\n                offer_money_trolls: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'leave',\n                                cond: (context) => context.recResult[0].utterance.includes(\"leave\" || \"Leave.\"), \n                                actions: assign({ background: (context) => img_grammar[\"Leave.\"].background! })\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: 'lookforacorns',\n                                cond: (context) => context.recResult[0].utterance.includes(\"acorn\" || \"look\"),\n                                actions: assign({ background: (context) => img_grammar[\"Acorns.\"].background! })\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"You say you don't have acorns, but you have two 5 euros bills in your pocket. The trolls laugh.\"),\n                            on: { ENDSPEECH: 'cavealternatives' },\n                        },\n                        cavealternatives: {\n                            ...promptAndAsk(\"You can either leave or look for some acorns.\")\n                        }\n                    }\n                },\n                leave: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'river1',\n                                cond: (context) => menu['left'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[\"River.\"].background! })\n\n                            },\n                            {\n                                target: 'backtocave',\n                                cond: (context) => menu['right'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[\"Cave.\"].background! })\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"You don't have time for that, you need to find your wallet, and these trolls definitely don't have it.  You turn around and wander for a bit. You arrive at a crossroads.\"),\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: 'wander'\n                        },\n                        wander: {\n                            ...promptAndAsk(\"Do you go to the right or to the left?\"),\n                            on: { ENDSPEECH: '#root.dm.init' },\n                        },\n                    }\n                },\n                backtocave: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'talktotrolls',\n                                cond: (context) => menu['talk'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'anotherpath',\n                                cond: (context) => menu['path'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[context.recResult[0].utterance].background! })\n \n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"You just walked in a circle and now you're back at the cave. I see your orientation skills aren't the best.\"),\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: 'wander'\n                        },\n                        wander: {\n                            ...promptAndAsk(\"Do you try to talk to the trolls again or find another path?\"),\n                            on: { ENDSPEECH: '#root.dm.init' },\n                        },\n                    }\n                },\n                talktotrolls: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '.trollskill',\n                                cond: (context) => menu['talk'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: 'anotherpath',\n                                cond: (context) => menu['path'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[context.recResult[0].utterance].background! })\n\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"The trolls don't want to waste their time with you again. You should find another path before they get too mad. Or you could try again. But I wouldn't personally recommend that.\"),\n                            on: { ENDSPEECH: 'choices' },\n                        },\n                        choices: {\n                            ...promptAndAsk(\"So what will it be?\"),\n                            on: { ENDSPEECH: 'trollskill' },\n                        },\n                        trollskill: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"I don't know why you won't listen to me. The trolls have had enough of you. They club you to death.\"),\n                                    assign({ lifecounter: (context) => context.lifecounter - 1 })],\n                                    on: { ENDSPEECH: '#root.dm.endofgame' },\n                                },\n                            },\n\n                        },\n                    }\n                },\n                anotherpath: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.voicegameapp.river2',\n                                cond: (context) => menu['yes'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[context.recResult[0].utterance].background! })\n\n                            },\n                            {\n                                target: '.what',\n                                cond: (context) => menu['no'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[context.recResult[0].utterance].background! })\n\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"You're back to that crossroads again.\"),\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: 'omg'\n                        },\n                        omg: {\n                            ...promptAndAsk(\"Omg, Look! A squirrel has your wallet. Do you want to chase it?\"),\n                        },\n                        what: {\n                            ...prompt(\"What do you mean, no? We're chasing it. Come on.\"),\n                            on: { ENDSPEECH: '#root.dm.voicegameapp.river2' },    \n                        }\n                    }                \n                },\n                river2: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            ...prompt(\"It led you to the river.\"),\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: '#root.dm.voicegameapp.squirrelriver'\n                        }\n                    } \n                },\n                river1: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '.somewhere_else',\n                                cond: (context) => menu['else'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '#root.dm.voicegameapp.river1.wait',\n                                cond: (context) => menu['wait'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '#root.dm.voicegameapp.river1.look',                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"You get to a river.\"),\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: 'ask'\n                        },\n                        ask: {\n                            ...promptAndAsk(\"Not much to see here actually. Do you want to wait here for a bit, or go somewhere else?\"),\n                        },\n                        somewhere_else: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"Ugh I don't know about that. I mean, you just got here but I also work on the alternative paths and it's been a long way to get here from the cave. I'm a bit tired.\")],\n                                    on: { ENDSPEECH: '#root.dm.voicegameapp.river1.wait' },\n                                },\n                            },\n                        },\n                        wait: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    \n                                    ...prompt(\"Let's wait then. So have you seen a good movie lately? \"),\n                                    on: { ENDSPEECH: 'ask' },\n                                },\n                                ask: {\n                                    entry: send('LISTEN'),\n                                }\n                            },\n                        },\n                        look: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"Nevermind! Look! A squirrel has your wallet! Do something!\")],\n                                    on: { ENDSPEECH: '#root.dm.voicegameapp.squirrelriver' },\n                                },\n                            },\n                        },\n                    },\n                },\n                squirrelriver: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '#root.dm.voicegameapp.squirrelriver.cross',\n                                cond: (context) => context.recResult[0].utterance.includes(\"cross\" || \"river\"),\n                            },\n                            {\n                                target: '#root.dm.voicegameapp.squirrelriver.shout',\n                                cond: (context) => menu['shout'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '#root.dm.voicegameapp.lure',\n                                cond: (context) => menu['lure'].includes(context.recResult[0].utterance) || context.recResult[0].utterance.includes(\"river\"),\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"The squirrel crosses the river before you can reach it.\"),\n                            on: { ENDSPEECH: 'ask' },\n                        },\n                        ask: {\n                            ...promptAndAsk(\"Do you try to: cross the river, shout profanities at the squirrel, or try to lure it with money?\"),\n                        },\n                        cross: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"You try to cross the river but you lose your balance and you fall in it. You drown.\"),\n                                    assign({ lifecounter: (context) => context.lifecounter - 1 })],\n                                    on: { ENDSPEECH: '#root.dm.endofgamebeach' },\n                                },\n                            },\n                        },\n                        shout: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: say(() => \"Out of frustration you shout some pretty heavy stuff at the squirrel. I guess somehow it understood you, because it throws your wallet in the river. Nice job genius. You lose the game, your wallet is gone forever.\"),\n                                    on: { ENDSPEECH: '#root.dm.init' },\n                                },\n                            },\n                        },\n                    },\n                },\n                lure: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '#root.dm.voicegameapp.ending1',\n                                cond: (context) => menu['money'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '#root.dm.voicegameapp.ending2',\n                                cond: (context) => menu['take'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"You whip out your shiny bill and wave it around. The squirrel is immediately attracted to it and crosses the river back to you.\"),\n                            on: { ENDSPEECH: 'ask' },\n                        },\n                        ask: {\n                            ...promptAndAsk(\"Do you try to give it the bill in exchange for your wallet, or try to take it forcibly?\"),\n                        },\n                    },\n                },\n                ending1: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            ...prompt(\"The squirrel actually takes the bill and gives you the wallet. Dumb squirrel, you think to yourself, but then again, how could it know the difference between a lot of money and a few? Maybe it just likes the color green more. Congratulations! You have won the game! And it seems like the squirrel has offered to help lead you out of the forest and find your way home. I think you're in good hands. Goodbye and congratulations!\"),\n                            on: { ENDSPEECH: '#root.dm.init' },\n                        },\n                    },\n                },\n                ending2: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            ...prompt(\"I didn't think you could do it, but you really are trying to fight this squirrel. It's suspiciously strong too. After a good tussle, you manage to rip your wallet out of its grasp. The squirrel scratches at your face one last time and scurries away. Congratulations! You're now left alone, with your wallet but no idea of how to get back home. I think you're on your own with this one, buddy. Goodbye.\"),\n                            on: { ENDSPEECH: '#root.dm.init' },\n                        },\n                    },\n                },\n                lookforacorns: {\n                    initial: 'sayacorns',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '.shake_tree',\n                                cond: (context) => menu['shake'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'climb_tree',\n                                cond: (context) => menu['climb'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        sayacorns: {\n                            ...prompt(\"You leave and find an oak.\"),\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: 'tellforeststory'\n                        },\n                        tellforeststory: {\n                            ...promptAndAsk(\"Do you shake it or try to climb it?\"),\n                        },\n                        shake_tree: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"You shake the tree as hard as you can. A squirrel falls down and scratches at your eyes. The damage is so bad that you eventually die. Sorry.\"),\n                                    assign({ lifecounter: (context) => context.lifecounter - 1 })],\n                                    on: { ENDSPEECH: '#root.dm.endofgame' },\n                                },\n                            },\n                        },\n                    },\n                },\n                climb_tree: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '.steal',\n                                cond: (context) => menu['steal'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '.offermoneysquirrel',\n                                cond: (context) => menu['money'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[context.recResult[0].utterance].background! })\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"You climb the tree and find a squirrel's nest, with exactly 10 acorns.\"),\n                            on: { ENDSPEECH: 'climbchoices' },\n                        },\n                        climbchoices: {\n                            ...promptAndAsk(\"Do you try to steal them or try to give the squirrel 5 euros?\")\n                        },\n                        steal: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"Did you really think you would survive this? The squirrel immediately takes its revenge.\"),\n                                    assign({ lifecounter: (context) => context.lifecounter - 1 })],\n                                    on: { ENDSPEECH: '#root.dm.endofgame' },\n                                }\n                            },\n                        },\n                        offermoneysquirrel: {\n                            initial: 'prompt',\n                            states: {\n                                prompt: {\n                                    ...prompt(\"The squirrel accepts the transaction. You now have the acorns and go back to the trolls, but you wonder why a squirrel needs money.\"),\n                                    on: { ENDSPEECH: 'backgroundChanger' },\n\n                                },\n                                backgroundChanger: {\n                                    entry: ['changeBackground'],\n                                    always: '#root.dm.voicegameapp.cave2'\n                                },\n                            },\n                        }\n                    }\n                },\n                cave2: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: 'insidecave',\n                                cond: (context) => menu['inside'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[context.recResult[0].utterance].background! })\n                            },\n                            {\n                                target: '#root.dm.voicegameapp.leave',\n                                cond: (context) => menu['change'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[context.recResult[0].utterance].background! })\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            ...prompt(\"You give the trolls the 10 acorns.\"),\n                            on: { ENDSPEECH: 'choices' },\n                        },\n                        choices: {\n                            ...promptAndAsk(\"Do you go inside the cave or do you change your mind?\")\n                        },   \n                    }\n                },\n\n                insidecave: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '.buy',\n                                cond: (context) => menu['buy'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '#root.dm.voicegameapp.leave',\n                                cond: (context) => menu['leave'].includes(context.recResult[0].utterance),\n                                actions: assign({ background: (context) => img_grammar[context.recResult[0].utterance].background! })\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        prompt: {\n                            entry: say(() => \"You are now inside the cave.\"),\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: [\n                                {target: 'inside'},\n                            ],\n                        },\n                        inside: {\n                            ...promptAndAsk(\"Out of all the things you expected to see here, you find the unexpected. There's an ice cream stand inside the cave. Do you buy an ice cream or leave?\"),\n                        },\n                        buy: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"You buy a strawberry ice cream with the 5 euros you had left, but you unexpectedly lose a life. Weird. \"),\n                                    assign({ lifecounter: (context) => context.lifecounter - 1 })],\n                                    on: { ENDSPEECH: '#root.dm.endofgame' },\n                                },\n                            },\n                        },\n                    }\n                },\n\n                beach: {\n                    initial: 'saybeach',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => menu['help'].includes(context.recResult[0].utterance),\n                            },\n                            {\n                                target: '.boat',\n                                cond: (context) => context.recResult[0].utterance.includes(\"boat\") || context.recResult[0].utterance.includes(\"left\"),\n                            },\n                            {\n                                target: '.palm_tree',\n                                cond: (context) => context.recResult[0].utterance.includes(\"tree\") || context.recResult[0].utterance.includes(\"right\"),\n                            },\n                            {\n                                target: 'stop', cond: (context) => \"stop\" in (stopwords[context.recResult[0].utterance] || {}) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: '..',\n                    },\n                    states: {\n                        saybeach: {\n                            entry: say(() => \"It definitely looked like a forest to me, but if you say so, sure. It is a beach.\"),\n                            on: { ENDSPEECH: 'backgroundChanger' },\n                        },\n                        backgroundChanger: {\n                            entry: ['changeBackground'],\n                            always: [\n                                {target: 'tellbeachstory1', cond: (context) => context.lifecounter === 3},\n                                {target: 'tellbeachstory2', cond: (context) => context.lifecounter < 3},\n                            ],\n                        },\n                        tellbeachstory1: {\n                            ...promptAndAsk(\"You take a few steps forward to see more of your surroundings. To your left there's a stranded boat and to your right you see a few palm trees. Where do you go?\"),\n                        },\n                        tellbeachstory2: {\n                            ...promptAndAsk(\"You've been here before. You take a look at your surroundings. Do you go to the boat to the left or to the palm trees on the right?\")\n                        },\n                        boat: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"Oh no! A shark was swimming right next to the boat. It attacks you and you don't survive. I told you it wasn't a beach...Too bad\"),\n                                    assign({ lifecounter: (context) => context.lifecounter - 1 })],\n                                    on: { ENDSPEECH: '#root.dm.endofgamebeach' },\n                                },\n                            },\n                        },\n                        palm_tree: {\n                            initial: 'sayprompt',\n                            states: {\n                                sayprompt: {\n                                    entry: [say(() => \"Oh no! A coconut falls from one of the palm trees and hits you in the head. I told you it wasn't a beach. You should've listened to me. Too bad you didn't\"),\n                                    assign({ lifecounter: (context) => context.lifecounter - 1 })],\n                                    on: { ENDSPEECH: '#root.dm.endofgamebeach' },\n                                },\n                            },\n                        },\n                    },\n                }\n            }\n        }\n    }\n}\n)\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmvoicegame\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n  id: \"root\",\n  type: \"parallel\",\n  states: {\n    dm: {\n        ...dmMachine\n    },\n    asrtts: {\n      initial: \"init\",\n      states: {\n        init: {\n          on: {\n            CLICK: {\n              actions: [\n                assign({\n                  audioCtx: (_ctx) =>\n                    new ((window as any).AudioContext ||\n                      (window as any).webkitAudioContext)(),\n                }),\n                (context) =>\n                  navigator.mediaDevices\n                    .getUserMedia({ audio: true })\n                    .then(function (stream) {\n                      context.audioCtx.createMediaStreamSource(stream);\n                    }),\n              ],\n              target: \"#root.asrtts.getToken\",\n            },\n          },\n        },\n        getToken: {\n          invoke: {\n            src: (_ctx, _evt) => getAuthorizationToken(),\n            id: \"getAuthorizationToken\",\n            onDone: [\n              {\n                actions: [\n                  assign((_context, event) => {\n                    return { azureAuthorizationToken: event.data };\n                  }),\n                  \"ponyfillASR\",\n                ],\n                target: \"#root.asrtts.ponyfillTTS\",\n              },\n            ],\n            onError: [\n              {\n                target: \"#root.asrtts.fail\",\n              },\n            ],\n          },\n        },\n        ponyfillTTS: {\n          invoke: {\n            src: (context, _event) => (callback, _onReceive) => {\n              const ponyfill = createSpeechSynthesisPonyfill({\n                audioContext: context.audioCtx,\n                credentials: {\n                  region: REGION,\n                  authorizationToken: context.azureAuthorizationToken,\n                },\n              });\n              const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n              context.tts = speechSynthesis;\n              context.ttsUtterance = SpeechSynthesisUtterance;\n              context.tts.addEventListener(\"voiceschanged\", () => {\n                context.tts.cancel();\n                const voices = context.tts.getVoices();\n                let voiceRe = RegExp(\"en-US\", \"u\");\n                if (process.env.REACT_APP_TTS_VOICE) {\n                  voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, \"u\");\n                }\n                const voice = voices.find((voice) =>\n                  /Ryan/u.test(voice.name)\n                )!; //voices.find((v: any) => voiceRe.test(v.name))!\n                if (voice) {\n                  context.voice = voice;\n                  callback(\"TTS_READY\");\n                } else {\n                  console.error(\n                    `TTS_ERROR: Could not get voice for regexp ${voiceRe}`\n                  );\n                  callback(\"TTS_ERROR\");\n                }\n              });\n            },\n            id: \"ponyTTS\",\n          },\n          on: {\n            TTS_READY: {\n              target: \"#root.asrtts.idle\",\n            },\n            TTS_ERROR: {\n              target: \"#root.asrtts.fail\",\n            },\n          },\n        },\n        idle: {\n          on: {\n            LISTEN: {\n              target: \"#root.asrtts.recognising\",\n            },\n            SPEAK: {\n              actions: assign((_context, event) => {\n                return { ttsAgenda: event.value };\n              }),\n              target: \"#root.asrtts.speaking\",\n            },\n          },\n        },\n        recognising: {\n          exit: \"recStop\",\n          initial: \"noinput\",\n          states: {\n            noinput: {\n              entry: [\n                \"recStart\",\n                send(\n                  { type: \"TIMEOUT\" },\n                  {\n                    delay: (context) =>\n                      500 * (context.tdmPassivity || defaultPassivity),\n                    id: \"timeout\",\n                  }\n                ),\n              ],\n              exit: cancel(\"timeout\"),\n              on: {\n                TIMEOUT: {\n                  target: \"#root.asrtts.idle\",\n                },\n                STARTSPEECH: {\n                  target: \"#root.asrtts.recognising.inprogress\",\n                },\n              },\n            },\n            inprogress: {},\n            match: {\n              entry: send(\"RECOGNISED\"),\n            },\n            pause: {\n              entry: \"recStop\",\n              on: {\n                CLICK: {\n                  target: \"#root.asrtts.recognising.noinput\",\n                },\n              },\n            },\n          },\n          on: {\n            ASRRESULT: {\n              actions: [\n                \"recLogResult\",\n                assign((_context, event) => {\n                  return {\n                    recResult: event.value,\n                  };\n                }),\n              ],\n              target: \"#root.asrtts.recognising.match\",\n            },\n            RECOGNISED: {\n              target: \"#root.asrtts.idle\",\n            },\n            SELECT: {\n              target: \"#root.asrtts.idle\",\n            },\n            CLICK: {\n              target: \"#root.asrtts.recognising.pause\",\n            },\n          },\n        },\n        speaking: {\n          entry: \"ttsStart\",\n          exit: \"ttsStop\",\n          on: {\n            ENDSPEECH: {\n              target: \"#root.asrtts.idle\",\n            },\n            SELECT: {\n              target: \"#root.asrtts.idle\",\n            },\n            CLICK: {\n              actions: send(\"ENDSPEECH\"),\n              target: \"#root.asrtts.idle\",\n            },\n          },\n        },\n        fail: {},\n      },\n    },\n  },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */ // .toLowerCase().replace(/\\.$/, \"\") after utterance??\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"], context.recResult[0][\"background\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Welcome to the game! Click the circle to start\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Welcome to the game! Click the circle to start\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeBackground: asEffect((context) => {\n                console.log(context.background)\n                document.body.style.backgroundImage =  `url('${context.background}')`\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }), \n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence,\n                                    \"background\": result[0].background\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        },\n    });\n    \n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);"],"sourceRoot":""}